status: response.status
headers: response.headers
body: response.body

response:
  when:
    # pass through to proxy
    - matches: request.url.pathname
      pattern: '^/img/resize/(\d+)'
      use: imageOpt
    - matches: request.url.pathname
      pattern: '^/(graphql|rest|media|cache/)'
      use: proxy
    - matches: request.url.pathname
      pattern: '^/create-account'
      use: index
    # serve document root (blank urlKey)
    - matches: request.url.pathname
      pattern: '^/(icons/.+|favicon.ico$|manifest.json$|veniaClosed.png$)'
      use: static
    # serve anything with a urlKey
    - matches: urlKey
      pattern: '.'
      use: appShell
    - matches: request.url.pathname
      pattern: '^/$'
      use: appShell
  default: bundles

# In dev and staging mode, the PWADevServer and Venia's server.js both declare
# the image resizing middleware at `/img/` before the UpwardPlugin declares
# middleware, so a request should never get here.

# In production mode when USE_FASTLY is true, the Venia PWA has a
# Fastly-specific URL factory. It should also never hit this route.

# In production mode when the PWA has NOT built a Fastly-specific URL factory,
# this forwards to Fastly where it is present, and drops back to the
# uncompressed image otherwise. If this will run on a non-FastlyIO server, an
# onboard resizing service is highly recommended.
imageOpt:
  inline:
    status: 301
    body:
      inline: ''
    headers:
      inline:
        Location:
          engine: mustache
          provide:
            width: $match.$1
            path: request.url.query.url
          template:
            when:
              - matches: env.USE_FASTLY
                pattern: '[^0]'
                use:
                  inline: '{{path}}?auto=webp&format=pjpg&width={{width}}'
            default:
              inline: '{{path}}'

isDevelopment:
  when:
    - matches: env.NODE_ENV
      pattern: 'development'
      use:
        inline: true
  default:
    inline: false

proxy:
  target: env.MAGENTO_BACKEND_URL
  # A local Magento install may have SSH configured and untrusted,
  # which is not a major concern, especially if containerized.
  ignoreSSLErrors:
    inline: true

appShell:
  inline:
    status:
      when:
        - matches: resource.model
          pattern: '.'
          use: 200
      default: 404
    headers:
      inline:
        content-type: 'text/html'
    body:
      engine: mustache
      template: resource.template
      provide:
        model: resource.model
        bundles: assetManifest.bundles
        urlResolver: urlResolver
        env: env

resource:
  when:
    - matches: urlResolver.type
      pattern: 'CMS_PAGE'
      use:
        inline:
          model: cmsPage
          template: './templates/cmspage-shell.mst'
    - matches: urlResolver.type
      pattern: 'CATEGORY'
      use:
        inline:
          model: category
          template: './templates/category-shell.mst'
    - matches: urlResolver.type
      pattern: 'PRODUCT'
      use:
        inline:
          model: product
          template: './templates/product-shell.mst'
    - matches: urlResolver.type
      pattern: '.'
      use:
        inline:
          model: unknownPageType
          template: './templates/generic-shell.mst'
    - matches: request.url.pathname
      pattern: '/search.html'
      use:
        inline:
          model: genericObject
          template: './templates/generic-shell.mst'
  default:
    inline:
      template: './templates/notfound-shell.mst'

assetManifest:
  when:
    - matches: env.NODE_ENV
      pattern: 'development'
      use: ./asset-manifest.json
  default: ./dist/asset-manifest.json

unknownPageType:
  inline:
    title: 'Unknown page type'

urlResolver: urlResolverResult.data.urlResolver

urlResolverResult:
  url: magentoGQL
  query: './src/queries/urlResolver.graphql'
  variables:
    inline:
      urlKey: request.url.pathname

magentoGQL:
  engine: mustache
  template:
    inline: '{{env.MAGENTO_BACKEND_URL}}/graphql'
  provide:
    - env

product: productResult.data.productDetail.items.0
productResult:
  url: magentoGQL
  query: './src/queries/getProductDetail.graphql'
  variables:
    inline:
      onServer: true
      urlKey: urlKey
      id: urlResolver.id

category: categoryResult.data.category
categoryResult:
  url: magentoGQL
  query: './src/queries/getCategory.graphql'
  variables:
    inline:
      onServer: true
      id: urlResolver.id
      pageSize:
        inline: 1
      currentPage:
        inline: 1


cmsPage: cmsPageResult.data.cmsPage
cmsPageResult:
  url: magentoGQL
  query: './src/queries/getCmsPage.graphql'
  variables:
    inline:
      onServer: true
      id: urlResolver.id

urlKey:
  when:
    - matches: request.url.pathname
      pattern: '^/(?:(.*)\.html)?'
      use: $match.$1
  default:
    inline: ''

genericObject:
  inline:
    name:
      inline:
        "Hello world!"

bundles:
  directory:
    inline: './dist'

index:
  inline:
    status: 200
    headers:
      inline:
        content-type:
          inline: text/html
    body:
      engine: mustache
      template: './templates/generic-shell.mst'
      provide:
        isDevelopment: isDevelopment

static:
  directory:
    inline: './static'
